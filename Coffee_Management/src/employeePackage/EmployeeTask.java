package employeePackage;

import model.Main;
import model.order;
import model.User;
import model.desk;
import model.products;
import model.reports;
import model.TableColorCellRenderer;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.*;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Administrator
 */
public class EmployeeTask extends javax.swing.JFrame {
public static  DefaultTableModel model ;
public static String ordercodeString = "Emptry";
public static ArrayList <order> orderList = new ArrayList<>();
public static int count=0;
public static  int idTable=0;
 ArrayList<products> productsList ;
 public static EmployeeTask ef;
//public static int idTable=1;
    public EmployeeTask() {
        initComponents();
        loaddataInTable();
        loadProductInTable();
        clock();
        helloName.setText("Xin chào "+ LogIn.saveUsernameString);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        findText = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        timeL = new javax.swing.JTextField();
        helloName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 255, 255));
        setMinimumSize(new java.awt.Dimension(1366, 736));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(153, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Mã Bàn", "Tên Bàn", "Trạng Thái", "Ghi Chú"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAlignmentX(1.0F);
        jTable1.setAlignmentY(1.0F);
        jTable1.setGridColor(new java.awt.Color(0, 0, 0));
        jTable1.setIntercellSpacing(new java.awt.Dimension(2, 2));
        jTable1.setRowHeight(35);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(5);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(5);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(5);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(5);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(50);
        }

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 90, 930, 580));

        findText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                findTextKeyReleased(evt);
            }
        });
        jPanel1.add(findText, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 390, 30));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất Cả", "Hoa Quả", "Đồ Uống", "Bánh Kẹo", " " }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 390, -1));

        jTable2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã ", "Tên", "Phân Loại", "Đơn Giá"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable2.setColumnSelectionAllowed(true);
        jScrollPane3.setViewportView(jTable2);
        jTable2.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 390, 580));

        timeL.setEditable(false);
        timeL.setBackground(new java.awt.Color(153, 255, 255));
        timeL.setBorder(null);
        timeL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeLActionPerformed(evt);
            }
        });
        jPanel1.add(timeL, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 10, 250, 30));

        helloName.setEditable(false);
        helloName.setBackground(new java.awt.Color(153, 255, 255));
        helloName.setBorder(null);
        jPanel1.add(helloName, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, 190, 30));

        jLabel2.setFont(new java.awt.Font("Tekton Pro Ext", 1, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 51, 0));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo-tasse-1 (2).png"))); // NOI18N
        jLabel2.setText("DREAM BEANS COFFEE ");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, -10, -1, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel9.setText("Team 5  © 2019");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 670, -1, -1));

        jButton1.setText("Tạo nhanh hóa đơn");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 60, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 770));

        jTextField2.setText("jTextField2");
        getContentPane().add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jMenuBar1.setPreferredSize(new java.awt.Dimension(20, 21));

        jMenu1.setText("Home");

        jMenuItem1.setText("Thông Báo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem3.setText("Danh sách liên lạc");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Hóa Đơn");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Account");

        jMenuItem2.setText("Chỉnh sửa thông tin");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem5.setText("Đăng xuất");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        setSize(new java.awt.Dimension(1364, 745));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
            EditInforMation editInforMation = new EditInforMation();
            editInforMation.setVisible(true);
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
      // Lấy id của table được chọn
      //Nếu trạng thái ban đầu của bàn là sãn sàng thì hiện ra bảng thông báo lựa chọn có muốn thay đổi trạng thái hay không?
        idTable = (int) jTable1.getValueAt(jTable1.getSelectedRow(), 1);
     count++;
     try{
           Class.forName("com.mysql.jdbc.Driver");
           Connection con = DriverManager.getConnection(Main.url, Main.usernameSQL, Main.passwordSQL);
           String sql = "SELECT * FROM desk Where desknumber =?";
            PreparedStatement pr = con.prepareStatement(sql);
            pr.setInt(1, idTable);
            ResultSet rs = pr.executeQuery();
            if(rs.next()){
               
                if(rs.getString(3).compareTo("Sẵn Sàng")==0){
                String a= "'CÓ KHÁCH'?";
                int jd = JOptionPane.showConfirmDialog(null, "Bạn có muốn chuyển trạng thái bàn "+a, "Trạng Thái Bàn", JOptionPane.YES_NO_CANCEL_OPTION);
                if(jd ==JOptionPane.YES_OPTION){
                    inforTable.i();
                    CreateOrderCode(count, idTable);
                    count++;
                    updateStatusTable(idTable);
                }
                else if(jd ==JOptionPane.NO_OPTION){
                inforTable.i();
                 dataOfBill(idTable);
                }
                }
                else{inforTable.i();}
            }
            
     }
     catch(Exception e){
         e.printStackTrace();
     }
     
    

dataOfBill(idTable);

      
    }//GEN-LAST:event_jTable1MouseClicked

    private void findTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findTextKeyReleased
        ArrayList<products> productTempt = new ArrayList<>();
 DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
 model.getDataVector().removeAllElements();
         productTempt.clear();
 if(jComboBox1.getSelectedItem().toString().compareTo("Hoa Quả")==0){
        for(int i=0; i<productsList.size(); i++){
            if(productsList.get(i).productLine.compareTo("Hoa Quả")==0 && productsList.get(i).productName.toLowerCase().contains(findText.getText().toLowerCase())){
            productTempt.add(new products(productsList.get(i).productCode, productsList.get(i).productName,productsList.get(i).productLine, productsList.get(i).price));
            }
        }
 }
 else if(jComboBox1.getSelectedItem().toString().compareTo("Đồ Uống")==0){
      for(int i=0; i<productsList.size(); i++){
            if(productsList.get(i).productLine.compareTo("Đồ Uống")==0 && productsList.get(i).productName.toLowerCase().contains(findText.getText().toLowerCase())){
            productTempt.add(new products(productsList.get(i).productCode, productsList.get(i).productName,productsList.get(i).productLine, productsList.get(i).price));
            }
        }
 }
 else if(jComboBox1.getSelectedItem().toString().compareTo("Bánh Kẹo")==0){
     for(int i=0; i<productsList.size(); i++){
            if(productsList.get(i).productLine.compareTo("Bánh Kẹo")==0 && productsList.get(i).productName.contains(findText.getText())){
            productTempt.add(new products(productsList.get(i).productCode, productsList.get(i).productName,productsList.get(i).productLine, productsList.get(i).price));
            }
        }
 }
 else{
      for(int i=0; i<productsList.size(); i++){
            if(productsList.get(i).productName.toLowerCase().contains(findText.getText().toLowerCase())){
            productTempt.add(new products(productsList.get(i).productCode, productsList.get(i).productName,productsList.get(i).productLine, productsList.get(i).price));
            }
        }
 }
 if(productTempt.size()>0){
    for(int i=0; i<productTempt.size(); i++){
        model.addRow(new Object[] {
            productTempt.get(i).productCode, productTempt.get(i).productName,productTempt.get(i).productLine, productTempt.get(i).price
        
        });
    }   }
 else{model.getDataVector().removeAllElements();}
 // TODO add your handling code here:
    }//GEN-LAST:event_findTextKeyReleased

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
loadProductInTable();        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        showContacts c = new showContacts();
        c.main();



        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
report r = new report();
    r.main();
// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void timeLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeLActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
      showOrderDetail so = new showOrderDetail();
      so.main();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
       int jd=  JOptionPane.showConfirmDialog(null, "Bạn có thực sự muốn đăng xuất", "Cảnh báo!", JOptionPane.YES_NO_OPTION);
         if(jd==JOptionPane.YES_OPTION){
           ef.setVisible(false);
           LogIn.aa();}
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        CreateOrderCode(0, 0);
        inforTable ift = new inforTable();
       ift.i ();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void e() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               ef= new EmployeeTask();
               ef.setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField findText;
    public javax.swing.JTextField helloName;
    public javax.swing.JButton jButton1;
    public javax.swing.JComboBox<String> jComboBox1;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel9;
    public javax.swing.JMenu jMenu1;
    public javax.swing.JMenu jMenu2;
    public javax.swing.JMenuBar jMenuBar1;
    public javax.swing.JMenuItem jMenuItem1;
    public javax.swing.JMenuItem jMenuItem2;
    public javax.swing.JMenuItem jMenuItem3;
    public javax.swing.JMenuItem jMenuItem4;
    public javax.swing.JMenuItem jMenuItem5;
    public javax.swing.JPanel jPanel1;
    public javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JTable jTable1;
    public javax.swing.JTable jTable2;
    public javax.swing.JTextField jTextField2;
    public javax.swing.JTextField timeL;
    // End of variables declaration//GEN-END:variables
    public static void loaddataInTable(){
        
        ArrayList<desk> deskList = new ArrayList<>();
          model = (DefaultTableModel) jTable1.getModel();
          model.getDataVector().removeAllElements();
          model.getDataVector().removeAllElements();
         
        try{
           Class.forName("com.mysql.jdbc.Driver");
           Connection con = DriverManager.getConnection(Main.url, Main.usernameSQL, Main.passwordSQL);
            PreparedStatement pr = con.prepareStatement("SELECT* from desk");
            ResultSet rs = pr.executeQuery();
            while (rs.next()) {                
                desk d = new desk();
                d.setDesknumber(rs.getInt(1));
                d.setDesknameString(rs.getString(2));
                d.setStatusString(rs.getString(3));
                d.setCommentString(rs.getString(4));
                deskList.add(d);
            }
            con.close();
        
        } catch(Exception e){
            e.printStackTrace();
        }
       
      for(int i=0; i<deskList.size(); i++){
          model.addRow( new Object[]{
              i+1,deskList.get(i).desknumber, deskList.get(i).desknameString, deskList.get(i).statusString, deskList.get(i).commentString
          }
         );
          
      }
     TableColorCellRenderer renderer = new TableColorCellRenderer();
     jTable1.setDefaultRenderer(Object.class, renderer);
  if(idTable>0){
      jTable1.setRowSelectionInterval(idTable-1, idTable-1);
  }
    
    }
public  void loadProductInTable(){
     productsList = new ArrayList<>();
       model = (DefaultTableModel) jTable2.getModel();
       model.getDataVector().removeAllElements();
       model.getDataVector().removeAllElements();
        try{
           Class.forName("com.mysql.jdbc.Driver");
           Connection con = DriverManager.getConnection(Main.url, Main.usernameSQL, Main.passwordSQL);
            PreparedStatement pr = con.prepareStatement("SELECT* from products");
            ResultSet rs = pr.executeQuery();
            while (rs.next()) {                
                products p = new products();
                p.setProductCode(rs.getString(1));
                p.setProductName(rs.getString(2));
                p.setProductLine(rs.getString(3));
                p.setPrice(rs.getInt(4));
                productsList.add(p);
            }
            con.close();
        
        } catch(Exception e){
            e.printStackTrace();
        }
      if(jComboBox1.getSelectedItem().toString().compareTo("Hoa Quả")==0){
      for(int i=0; i<productsList.size(); i++){
          if(productsList.get(i).productLine.compareTo("Hoa Quả")==0){
          model.addRow( new Object[]{
              productsList.get(i).productCode, productsList.get(i).productName, productsList.get(i).productLine, productsList.get(i).price
          
      } );
          
      }}}
       
       else if(jComboBox1.getSelectedItem().toString().compareTo("Đồ Uống")==0){
         for(int i=0; i<productsList.size(); i++){
          if(productsList.get(i).productLine.compareTo("Đồ Uống")==0){
          model.addRow( new Object[]{
              productsList.get(i).productCode, productsList.get(i).productName, productsList.get(i).productLine, productsList.get(i).price
          
      } );
          
      }}
       }
       
              else if(jComboBox1.getSelectedItem().toString().compareTo("Bánh Kẹo")==0){
         for(int i=0; i<productsList.size(); i++){
          if(productsList.get(i).productLine.compareTo("Bánh Kẹo")==0){
          model.addRow( new Object[]{
              productsList.get(i).productCode, productsList.get(i).productName, productsList.get(i).productLine, productsList.get(i).price
          
      } );
          
      }}
       }
       
       else {
             for(int i=0; i<productsList.size(); i++){
         
          model.addRow( new Object[]{
              productsList.get(i).productCode, productsList.get(i).productName, productsList.get(i).productLine, productsList.get(i).price
          
      } );
          
      }
       }
   

}
public void clock(){
    Thread clock = new Thread(){
        public void run(){
            try{
        while (true) {            
            java.util.Date date = new java.util.Date();
            DateFormat df = new SimpleDateFormat("hh:mm:ss  EEEE ,dd/MM/yyyy");
	    String time = df.format(date);
            timeL.setText(time);
            
        }
    
    }
            catch(Exception e){
                e.printStackTrace();
            }
        }
    };clock.start();
    
} 
public static void updateStatusTable(int idTable){
    Connection con;
    try{
    Class.forName("com.mysql.jdbc.Driver");
    con = DriverManager.getConnection(Main.url, Main.usernameSQL, Main.passwordSQL);
    String sql = "update desk set status = ? WHERE desknumber =?";
    PreparedStatement stm = con.prepareStatement(sql);
    stm.setString(1,"Có Khách" );
    stm.setInt(2, idTable );
    stm.execute();
    model = (DefaultTableModel) jTable1.getModel();
    model.getDataVector().removeAllElements();
   
    loaddataInTable();
    
    }
    catch(Exception e){
    e.printStackTrace();}


}
public static void dataOfBill(int idTable){
    orderList.clear();
 try{
       Class.forName("com.mysql.jdbc.Driver");
   Connection con = DriverManager.getConnection(Main.url, Main.usernameSQL, Main.passwordSQL);
    String sql = "SELECT * FROM `orders` WHERE `tablenumber`=? AND `status` IS NULL";
    PreparedStatement pr = con.prepareStatement(sql);
    pr.setInt(1, idTable);
    ResultSet rs = pr.executeQuery();
    if(rs.next()){
        System.out.print("áhasdfhdjhs");
        ordercodeString = rs.getString(1);
       String result =  rs.getString(1);
       String sql1 = "SELECT * FROM orderdetail WHERE ordercode =?";
       PreparedStatement pr1 = con.prepareStatement(sql1);
       pr1.setString(1, result);
       ResultSet rs1 = pr1.executeQuery();
            while(rs1.next()){
                order or = new order(rs1.getString(1), rs1.getString(2), rs1.getString(3), rs1.getInt(4), rs1.getInt(5));
                orderList.add(or);
            }
    }
    }
    catch(Exception e){
        e.printStackTrace();
    }
    System.out.println("aasd");
for(int i=0; i< EmployeeTask.orderList.size(); i++){
     System.out.print( i+1+EmployeeTask.orderList.get(i).productcode+EmployeeTask.orderList.get(i).nameProducts+ EmployeeTask.orderList.get(i).number+ EmployeeTask.orderList.get(i).pricecode);
                
     }

}
    
public static  void CreateOrderCode(int dem, int idtable ){
    java.util.Date date = new java.util.Date();
    dem++;
   SimpleDateFormat sdf = new SimpleDateFormat("yyyMMddhhmmss");
    String time = sdf.format(date);
    System.out.println(time);
    SimpleDateFormat sdf1 = new SimpleDateFormat("yyy-MM-dd hh:mm:ss");
  String timeOfBill = sdf1.format(date);
   String timeSQL = "B"+time+idtable;
   ordercodeString = timeSQL;
    try{
         System.out.print("Đya la them mot hoa don môi");
       Class.forName("com.mysql.jdbc.Driver");
       Connection con = DriverManager.getConnection(Main.url, Main.usernameSQL, Main.passwordSQL);
       String sql1 = "INSERT INTO `orders`(`ordercode`, `tablenumber`, `employeenumber`, `startingtime`) VALUES (?, ?, ?, ?)";
       PreparedStatement pr = con.prepareStatement(sql1);
       pr.setString(1, timeSQL);
       pr.setInt(2, idtable);
       pr.setString(3, LogIn.saveIdString);
       pr.setString(4, timeOfBill);
       pr.execute();
      con.close();
       
    }
    catch(Exception e){
    e.printStackTrace();}
            
}


}
