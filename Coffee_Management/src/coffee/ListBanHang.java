/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package coffee;

import ClassThucthi.ConnectedDatabase;
import ClassThucthi.HienThiDatabase;
import ClassThucthi.Xoadatabase;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import thucthi.ChiTietHD;

/**
 *
 * @author boss
 */
public class ListBanHang extends javax.swing.JFrame {
    public static ArrayList<Integer> list=new ArrayList();
    /**
     * Creates new form ListBilling
     */
    public ListBanHang() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        CLOSE = new javax.swing.JButton();
        TotalMoney = new javax.swing.JButton();
        DELETE = new javax.swing.JButton();
        DELETEALL = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Hóa Đơn");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("                                   DANH SÁCH HÓA ĐƠN BÁN HÀNG");

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã hóa đơn", "Mã bàn", "Mã Nhân viên", "Tổng tiền", "Ngày bán"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(40);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(20);
        }

        CLOSE.setText("Thoát");
        CLOSE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLOSEActionPerformed(evt);
            }
        });

        TotalMoney.setText("Tổng Tiền");
        TotalMoney.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TotalMoneyActionPerformed(evt);
            }
        });

        DELETE.setText("Xóa");
        DELETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DELETEActionPerformed(evt);
            }
        });

        DELETEALL.setText("Xóa Tất Cả");
        DELETEALL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DELETEALLActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(DELETEALL)
                                .addGap(28, 28, 28)
                                .addComponent(DELETE)
                                .addGap(47, 47, 47)
                                .addComponent(TotalMoney)
                                .addGap(34, 34, 34)
                                .addComponent(CLOSE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 709, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1045, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CLOSE)
                    .addComponent(TotalMoney)
                    .addComponent(DELETE)
                    .addComponent(DELETEALL))
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CLOSEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLOSEActionPerformed
        dispose();
        JFrame new1= new MenuManager ();
        new1.setVisible(true);
        list.clear();
    }//GEN-LAST:event_CLOSEActionPerformed

    private void TotalMoneyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TotalMoneyActionPerformed
       new Ttienban().setVisible(true);
       String sql=null;
       
       
        Connection cnn=ConnectedDatabase.getConnection();
          sql="SELECT left(a.startingtime,7) as date,sum(b.number*b.price) as total"
              + " FROM orders a INNER JOIN orderdetail b ON a.ordercode=b.ordercode"
               +" group by date"   ;
          
        try {
          Statement  ptm= cnn.createStatement();
            ResultSet rs=ptm.executeQuery(sql);
             DefaultTableModel model= (DefaultTableModel) coffee.Ttienban.jTable1.getModel();
            while(rs.next()){
                String date=rs.getString("date");
                int tien=rs.getInt("total");
                Object []data={date,tien};
                model.addRow(data);
            }
            
        } catch (SQLException ex) {
            ListNhanVien list1=new ListNhanVien();
           JOptionPane.showMessageDialog(list1,"lỗi"+ ex);
        }
        
        
        
          sql="SELECT left(a.startingtime,10) as date ,sum(b.number*b.price) as total"
              + " FROM orders a INNER JOIN orderdetail b ON a.ordercode=b.ordercode"
               +" group by date"   ;
          
        try {
          Statement  ptm= cnn.createStatement();
            ResultSet rs=ptm.executeQuery(sql);
             DefaultTableModel model= (DefaultTableModel) coffee.Ttienban.jTable2.getModel();
            while(rs.next()){
                String code=rs.getString("date");
                int tien=rs.getInt("total");
                list.add(tien);
                Object []data={code,tien};
                model.addRow(data);
            }
        } catch (SQLException ex) {
            ListNhanVien list1=new ListNhanVien();
           JOptionPane.showMessageDialog(list1,"lỗi"+ ex);
        }
        ArrayList<Integer> Lisss=new ArrayList();
        sql="SELECT  count(*) as sl,employeenumber"
              + " FROM orders "
               +"  group by employeenumber"   ;
          
        try {
          Statement  ptm= cnn.createStatement();
            ResultSet rs=ptm.executeQuery(sql);
             DefaultTableModel model= (DefaultTableModel) coffee.Ttienban.jTable3.getModel();
            while(rs.next()){
                int sl=rs.getInt("sl");
                Lisss.add(sl);
            }
        } catch (SQLException ex) {
            ListNhanVien list1=new ListNhanVien();
           JOptionPane.showMessageDialog(list1,"lỗi"+ ex);
        }
        
        
        
        
        
        
        sql="SELECT  count(*) as sl,a.ordercode,a.employeenumber ,sum(b.number*b.price) as total"
              + " FROM orders a INNER JOIN orderdetail b ON a.ordercode=b.ordercode"
               +" group by a.ordercode and a.employeenumber"   ;
          
        try {
          Statement  ptm= cnn.createStatement();
            ResultSet rs=ptm.executeQuery(sql);
             DefaultTableModel model= (DefaultTableModel) coffee.Ttienban.jTable3.getModel();
             int i=0;
            while(rs.next()){
                String id=rs.getString("employeenumber");
                int tien=rs.getInt("total");
                
                
                Object []data={id,Lisss.get(i),tien};
                model.addRow(data);
                i++;
            }
        } catch (SQLException ex) {
            ListNhanVien list1=new ListNhanVien();
           JOptionPane.showMessageDialog(list1,"lỗi"+ ex);
        }
        
    }//GEN-LAST:event_TotalMoneyActionPerformed

    private void DELETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DELETEActionPerformed
       if(jTable1.getSelectedRowCount()==0){
           JOptionPane.showMessageDialog(this,"Bạn chưa chọn hóa đơn để xóa");
       }
       else if(jTable1.getRowCount()==0){
            JOptionPane.showMessageDialog(this,"Bảng trống");
       }
       else{
           DefaultTableModel model=(DefaultTableModel) jTable1.getModel();
           String id=model.getValueAt(jTable1.getSelectedRow(),0).toString();
           Xoadatabase.xoaOrderdetails(id);
           Xoadatabase.xoaOrders(id);
           model.setRowCount(0);
           String sql=null;
        Connection cnn=ConnectedDatabase.getConnection();
          sql="SELECT a.ordercode,a.tablenumber,a.employeenumber,a.startingtime,sum(b.number*b.price) as total"
              + " FROM orders a INNER JOIN orderdetail b ON a.ordercode=b.ordercode"
              + " group by a.ordercode";
          
        try {
          Statement  ptm= cnn.createStatement();
            ResultSet rs=ptm.executeQuery(sql);
            while(rs.next()){
                String code=rs.getString("ordercode");
                int ban=rs.getInt("tablenumber");
                String manv=rs.getString("employeenumber");
                Timestamp date=rs.getTimestamp("startingtime");
                int tien=rs.getInt("total");
                Object []data={code,ban,manv,tien,date};
                model.addRow(data);
            }
            
        } catch (SQLException ex) {
            ListNhanVien list1=new ListNhanVien();
           JOptionPane.showMessageDialog(list1,"lỗi"+ ex);
        }
       }
    }//GEN-LAST:event_DELETEActionPerformed

    private void DELETEALLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DELETEALLActionPerformed
       String sql="delete from orderdetail where 1";
             ListBan lnv=new ListBan();
            Connection cnn=ConnectedDatabase.getConnection();
         try {
             PreparedStatement ptm=cnn.prepareStatement(sql);
             int k=ptm.executeUpdate();
             if(k!=0)JOptionPane.showMessageDialog(lnv,"xóa hoàn tất ");
             ptm.close();
         } catch (SQLException ex) {
             
            JOptionPane.showMessageDialog(lnv, "Lỗi: "+ex);
         }
         
           String sql1="delete from orders where 1"; 
         try {
             PreparedStatement ptm=cnn.prepareStatement(sql);
            
             int k=ptm.executeUpdate();
             if(k!=0)JOptionPane.showMessageDialog(lnv,"xóa hoàn tất ");
             ptm.close();
         } catch (SQLException ex) {
             
            JOptionPane.showMessageDialog(lnv, "Lỗi: "+ex);
         }
         DefaultTableModel model=(DefaultTableModel) jTable1.getModel();
         model.setRowCount(0);
         
    }//GEN-LAST:event_DELETEALLActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        DefaultTableModel model=(DefaultTableModel) jTable1.getModel();
        int k=jTable1.getSelectedRow();
        String id=model.getValueAt(k,0).toString();
        String sql=null;
        Connection cnn=ConnectedDatabase.getConnection();
        ChiTietHD new1=new ChiTietHD();
        new1.setVisible(true);
        new1.mhd.setText(id);
        new1.mb.setText(model.getValueAt(k,1).toString());
        new1.tg.setText(model.getValueAt(k,4).toString());
        new1.tnv.setText(new HienThiDatabase().hiennv(model.getValueAt(k,2).toString()));
        
          sql="SELECT a.ordercode,b.productname,b.price,b.number,(b.price*number) as total,a.discount,a.status"
              + " FROM orders a INNER JOIN orderdetail b ON a.ordercode=b.ordercode"
              + " where a.ordercode ='"+id+"'";
          String status=null;
        try {
          Statement  ptm= cnn.createStatement();
            ResultSet rs=ptm.executeQuery(sql);
            while(rs.next()){
                String name=rs.getString("productname");
                int soluong=rs.getInt("number");
                int  gia=rs.getInt("price");
                String tt=rs.getString("status");
                int km=rs.getInt("discount");
                int tien=rs.getInt("total");
                status=rs.getString("status");
                Object []data={name,soluong,gia,km,tien};
                 DefaultTableModel model1=(DefaultTableModel)thucthi.ChiTietHD.bang.getModel();
                model1.addRow(data);
            }
            
        } catch (SQLException ex) {
            ListNhanVien list1=new ListNhanVien();
           JOptionPane.showMessageDialog(list1,"lỗi"+ ex);
        }
        new1.tt.setText(status);
    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListBanHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListBanHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListBanHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListBanHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListBanHang().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CLOSE;
    private javax.swing.JButton DELETE;
    private javax.swing.JButton DELETEALL;
    private javax.swing.JButton TotalMoney;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
